 from django.shortcuts import render, redirect
from django.contrib import messages
from django.http import JsonResponse, HttpResponseRedirect
from django.db import IntegrityError
from django.contrib.auth.decorators import login_required
from django.contrib.auth.views import LoginView  
from .forms import CustomUserCreationForm, AccountProfileForm  
from .models import CustomUser, AccountProfile  
import logging
from django.urls import reverse

# إعداد سجل الأخطاء
logger = logging.getLogger(__name__)

### ✅ **🔹 الفيوهات الرئيسية**
def homepage(request):
    return render(request, 'homepage.html')

def dashboard(request):
    return render(request, 'dashboard.html')

def pending_activation(request):
    return render(request, 'pending_activation.html')

### ✅ **🔹 فيو تسجيل الدخول المخصص**
class CustomLoginView(LoginView):
    template_name = 'login.html'  

### ✅ **🔹 فيو التسجيل مع دعم التحقق الفوري وتحويل المستخدم مباشرة لصفحة النجاح**
def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST, request.FILES)

        # ✅ دعم AJAX للتحقق الفوري من المدخلات
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            if form.is_valid():
                return JsonResponse({'valid': True})
            else:
                errors = {field: [error for error in error_list] for field, error_list in form.errors.items()}
                return JsonResponse({'valid': False, 'errors': errors}, status=400)

        # ✅ عند تقديم النموذج بشكل عادي وليس عبر `AJAX`
        if form.is_valid():
            try:
                # ✅ التحقق مما إذا كان البريد الإلكتروني أو رقم الهاتف مستخدمًا بالفعل
                email = form.cleaned_data.get('email')
                phone_number = form.cleaned_data.get('phone_number')

                if CustomUser.objects.filter(email=email).exists():
                    messages.error(request, "⚠️ البريد الإلكتروني مستخدم بالفعل، يرجى استخدام بريد آخر.")
                    return render(request, 'register.html', {'form': form})

                if CustomUser.objects.filter(phone_number=phone_number).exists():
                    messages.error(request, "⚠️ رقم الجوال مستخدم بالفعل، يرجى استخدام رقم آخر.")
                    return render(request, 'register.html', {'form': form})

                # ✅ حفظ المستخدم فقط إذا لم يكن موجودًا بالفعل
                user = form.save(commit=False)
                user.is_active = False  # ✅ الحساب يبقى غير مفعل حتى موافقة المشرف
                user.save()

                # ✅ التحقق مما إذا كان `AccountProfile` موجودًا مسبقًا لتجنب الخطأ
                profile, created = AccountProfile.objects.get_or_create(
                    user=user,
                    defaults={
                        'email': user.email,
                        'phone_number': user.phone_number,
                        'resume': user.resume
                    }
                )

                if not created:
                    logger.warning(f"⚠️ AccountProfile موجود مسبقًا للمستخدم {user.email}, لم يتم إنشاؤه مجددًا.")

                request.session.flush()  # ✅ حذف الجلسات السابقة بعد التسجيل
                
                messages.success(request, "✅ تم تسجيل حسابك بنجاح، يرجى انتظار موافقة المشرف على تفعيل حسابك.")

                # ✅ إعادة التوجيه إلى صفحة انتظار التفعيل بعد النجاح
                return HttpResponseRedirect(reverse('pending_activation'))   

            except IntegrityError as e:
                logger.error(f"❌ خطأ في قاعدة البيانات أثناء التسجيل: {e}")
                messages.error(request, "⚠️ حدث خطأ أثناء التسجيل، يرجى المحاولة لاحقًا.")
                return redirect('register')  # منع البقاء في نفس الصفحة مع رسالة خاطئة

            except Exception as e:
                logger.error(f"❌ خطأ غير متوقع أثناء التسجيل: {e}")
                messages.error(request, "⚠️ حدث خطأ غير متوقع، يرجى المحاولة لاحقًا.")
                return redirect('register')  # منع البقاء في نفس الصفحة مع رسالة خاطئة

        else:
            messages.error(request, "⚠️ يوجد أخطاء في النموذج، يرجى تصحيحها قبل المتابعة.")

    else:
        form = CustomUserCreationForm()

    return render(request, 'register.html', {'form': form})

### ✅ **🔹 فيو تحديث الحساب الشخصي**
@login_required
def update_profile(request):
    try:
        profile = request.user.account_profile  

        if request.method == 'POST':
            form = AccountProfileForm(request.POST, request.FILES, instance=profile)
            if form.is_valid():
                form.save()
                messages.success(request, "✅ تم تحديث حسابك بنجاح!")
                return redirect('dashboard')
            else:
                messages.error(request, "⚠️ يوجد أخطاء في البيانات المدخلة.")
        else:
            form = AccountProfileForm(instance=profile)

        return render(request, 'update_profile.html', {'form': form})

    except AccountProfile.DoesNotExist:
        messages.error(request, "⚠️ لم يتم العثور على الملف الشخصي!")
        return redirect('dashboard')

### ✅ **🔹 فيوز التحقق الفوري من الحقول الفريدة**
def validate_username(request):
    username = request.GET.get("value", "").strip()
    if CustomUser.objects.filter(username=username).exists():
        return JsonResponse({"exists": True, "message": "❌ اسم المستخدم مسجل بالفعل!"})
    return JsonResponse({"exists": False, "message": "✅ اسم المستخدم متاح!"})

def validate_email(request):
    email = request.GET.get("value", "").strip()
    if CustomUser.objects.filter(email=email).exists() or AccountProfile.objects.filter(email=email).exists():
        return JsonResponse({"exists": True, "message": "❌ البريد الإلكتروني مستخدم بالفعل!"})
    return JsonResponse({"exists": False, "message": "✅ البريد الإلكتروني متاح!"})

def validate_phone_number(request):
    phone_number = request.GET.get("value", "").strip()
    if CustomUser.objects.filter(phone_number=phone_number).exists() or AccountProfile.objects.filter(phone_number=phone_number).exists():
        return JsonResponse({"exists": True, "message": "❌ رقم الجوال مستخدم بالفعل!"})
    return JsonResponse({"exists": False, "message": "✅ رقم الجوال متاح!"})
